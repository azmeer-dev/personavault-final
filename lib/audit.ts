import prisma from '@/lib/prisma';
import { AuditActorType, AuditLogOutcome, Prisma } from '@prisma/client';

export interface CreateAuditLogArgs {
  actorType: AuditActorType;
  actorUserId?: string | null;
  actorAppId?: string | null;
  action: string;
  targetEntityType?: string | null;
  targetEntityId?: string | null;
  details?: Prisma.InputJsonValue | null; // Allows any valid JSON structure
  outcome?: AuditLogOutcome; // Made outcome optional to align with schema default
}

export async function createAuditLog(data: CreateAuditLogArgs): Promise<void> {
  try {
    await prisma.auditLog.create({
      data: {
        ...data,
        // id and timestamp are auto-generated by Prisma schema defaults
        // outcome defaults to SUCCESS as per schema, unless overridden in data
      },
    });
    // Optional: console.log('Audit log created:', data.action, data.outcome); 
  } catch (error) {
    // Log the error and the data that failed to be logged for debugging
    console.error('Failed to create audit log:', error, 'Log data:', data);
    // It's generally preferred not to let audit log failures break the main operation.
    // If specific error handling or re-throwing is needed for some cases,
    // that logic could be added here or in the calling code.
  }
}
