'use client';

import React, { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";

import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import {
    Select,
    SelectTrigger,
    SelectValue,
    SelectContent,
    SelectItem,
} from "@/components/ui/select";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";

import {
    Form,
    FormControl,
    FormField,
    FormItem,
    FormLabel,
    FormMessage,
} from "@/components/ui/form";
import { cn } from "@/lib/utils";

import { IdentitySchema, IdentityFormData } from "@/schemas/identity";

export interface CreateIdentityFormProps {
    accountOptions: { id: string; provider: string; email: string | null }[];
    identityId?: string;
    initialData?: IdentityFormData;
}

const CATEGORIES = [
    "Personal",
    "Professional",
    "Family",
    "Education",
    "Community",
    "Creative",
    "Health & Wellness",
    "Travel",
    "Legal",
    "Communication",
    "SocialMedia",
    "Messaging",
    "Productivity",
    "Development",
    "Finance",
    "Shopping",
    "Entertainment",
    "HealthcarePortal",
    "GovernmentService",
    "Utility",
    "IoT",
    "Custom",
] as const;

const VISIBILITY_OPTIONS = [
    { value: "PUBLIC", label: "Public" },
    { value: "PRIVATE", label: "Private" },
] as const;

export default function CreateIdentityForm({
    accountOptions,
    identityId,
    initialData,
}: CreateIdentityFormProps) {
    const router = useRouter();
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);

    const form = useForm<IdentityFormData>({
        resolver: zodResolver(IdentitySchema),
        defaultValues: initialData || {
            identityLabel: "",
            category: "Personal",
            customCategoryName: "",
            description: "",
            contextualNameDetails: {},
            identityNameHistory: {},
            contextualReligiousNames: [],
            genderIdentity: "",
            customGenderDescription: "",
            pronouns: "",
            dateOfBirth: undefined,
            location: "",
            profilePictureUrl: "",
            identityContacts: {},
            onlinePresence: {},
            websiteUrls: [],
            additionalAttributes: {},
            visibility: "PRIVATE",
            user: { id: "" },
            relatedConsents: [],
            relatedConsentRequests: [],
            linkedExternalAccounts: [],
        },
        mode: "onChange",
    });

    // Update form default values when initialData changes (e.g., when editing an existing identity)
    useEffect(() => {
        if (initialData) {
            form.reset(initialData);
        }
    }, [initialData, form]);

    const onSubmit = async (data: IdentityFormData) => {
        setLoading(true);
        setError(null);
        const url = identityId ? `/api/identities/${identityId}` : `/api/identities`;
        const method = identityId ? "PUT" : "POST";

        try {
            const res = await fetch(url, {
                method,
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(data),
            });
            if (res.ok) {
                router.push("/identities");
            } else {
                const errorText = await res.text();
                setError(
                    `Failed to ${identityId ? "update" : "create"} identity: ${errorText}`
                );
                console.error(errorText);
            }
        } catch (err: any) {
            setError(
                `An error occurred while ${
                    identityId ? "updating" : "creating"
                } identity: ${err.message || "Unknown error"}`
            );
            console.error(err);
        } finally {
            setLoading(false);
        }
    };

    const category = form.watch("category");

    return (
        <Form {...form}>
            <form
                onSubmit={form.handleSubmit(onSubmit)}
                className="space-y-6 max-w-2xl mx-auto p-6 border rounded-lg shadow-md bg-card text-card-foreground"
            >
                <h2 className="text-2xl font-semibold text-center">
                    {identityId ? "Edit Identity" : "Create New Identity"}
                </h2>
                {error && (
                    <div className="bg-destructive text-destructive-foreground p-4 rounded-md">
                        {error}
                    </div>
                )}

                <FormField
                    control={form.control}
                    name="category"
                    render={({ field }) => (
                        <FormItem>
                            <FormLabel>Category</FormLabel>
                            <Select onValueChange={field.onChange} value={field.value}>
                                <FormControl>
                                    <SelectTrigger className="w-full">
                                        <SelectValue placeholder="Select category" />
                                    </SelectTrigger>
                                </FormControl>
                                <SelectContent>
                                    {CATEGORIES.map((cat) => (
                                        <SelectItem key={cat} value={cat}>
                                            {cat}
                                        </SelectItem>
                                    ))}
                                </SelectContent>
                            </Select>
                            <FormMessage />
                        </FormItem>
                    )}
                />

                {category === "Custom" && (
                    <FormField
                        control={form.control}
                        name="customCategoryName"
                        render={({ field }) => (
                            <FormItem>
                                <FormLabel>Custom Category Name</FormLabel>
                                <FormControl>
                                    <Input
                                        placeholder="Enter custom category name"
                                        {...field}
                                        className={cn(
                                            "w-full",
                                            form.formState.errors.customCategoryName &&
                                                "border-destructive"
                                        )}
                                    />
                                </FormControl>
                                <FormMessage />
                            </FormItem>
                        )}
                    />
                )}

                <FormField
                    control={form.control}
                    name="identityLabel"
                    render={({ field }) => (
                        <FormItem>
                            <FormLabel>Identity Label</FormLabel>
                            <FormControl>
                                <Input
                                    placeholder="e.g., Work Profile, Personal Account"
                                    {...field}
                                    className={cn(
                                        "w-full",
                                        form.formState.errors.identityLabel && "border-destructive"
                                    )}
                                />
                            </FormControl>
                            <FormMessage />
                        </FormItem>
                    )}
                />

                <FormField
                    control={form.control}
                    name="contextualReligiousNames"
                    render={({ field }) => (
                        <FormItem>
                            <FormLabel>Religious Names</FormLabel>
                            <FormControl>
                                <Input
                                    placeholder="Enter religious names, separated by commas"
                                    value={field.value.join(", ")}
                                    onChange={(e) =>
                                        field.onChange(
                                            e.target.value
                                                .split(",")
                                                .map((v) => v.trim())
                                                .filter(Boolean)
                                        )
                                    }
                                    className="w-full"
                                />
                            </FormControl>
                            <FormMessage />
                        </FormItem>
                    )}
                />

                <FormField
                    control={form.control}
                    name="description"
                    render={({ field }) => (
                        <FormItem>
                            <FormLabel>Description</FormLabel>
                            <FormControl>
                                <Textarea
                                    placeholder="Optional description of this identity"
                                    {...field}
                                    className={cn(
                                        "w-full",
                                        form.formState.errors.description && "border-destructive"
                                    )}
                                />
                            </FormControl>
                            <FormMessage />
                        </FormItem>
                    )}
                />

                <FormField
                    control={form.control}
                    name="genderIdentity"
                    render={({ field }) => (
                        <FormItem>
                            <FormLabel>Gender Identity</FormLabel>
                            <FormControl>
                                <Input
                                    placeholder="Enter your gender identity"
                                    {...field}
                                    className={cn(
                                        "w-full",
                                        form.formState.errors.genderIdentity && "border-destructive"
                                    )}
                                />
                            </FormControl>
                            <FormMessage />
                        </FormItem>
                    )}
                />

                <FormField
                    control={form.control}
                    name="customGenderDescription"
                    render={({ field }) => (
                        <FormItem>
                            <FormLabel>Custom Gender Description</FormLabel>
                            <FormControl>
                                <Input
                                    placeholder="Describe your gender identity"
                                    {...field}
                                    className={cn(
                                        "w-full",
                                        form.formState.errors.customGenderDescription &&
                                            "border-destructive"
                                    )}
                                />
                            </FormControl>
                            <FormMessage />
                        </FormItem>
                    )}
                />

                <FormField
                    control={form.control}
                    name="pronouns"
                    render={({ field }) => (
                        <FormItem>
                            <FormLabel>Pronouns</FormLabel>
                            <FormControl>
                                <Input
                                    placeholder="Enter your pronouns (e.g., they/them, she/her)"
                                    {...field}
                                    className={cn(
                                        "w-full",
                                        form.formState.errors.pronouns && "border-destructive"
                                    )}
                                />
                            </FormControl>
                            <FormMessage />
                        </FormItem>
                    )}
                />

                <FormField
                    control={form.control}
                    name="dateOfBirth"
                    render={({ field }) => (
                        <FormItem>
                            <FormLabel>Date of Birth</FormLabel>
                            <FormControl>
                                <Input
                                    type="date"
                                    {...field}
                                    className={cn(
                                        "w-full",
                                        form.formState.errors.dateOfBirth && "border-destructive"
                                    )}
                                />
                            </FormControl>
                            <FormMessage />
                        </FormItem>
                    )}
                />

                <FormField
                    control={form.control}
                    name="location"
                    render={({ field }) => (
                        <FormItem>
                            <FormLabel>Location</FormLabel>
                            <FormControl>
                                <Input
                                    placeholder="Enter your location"
                                    {...field}
                                    className={cn(
                                        "w-full",
                                        form.formState.errors.location && "border-destructive"
                                    )}
                                />
                            </FormControl>
                            <FormMessage />
                        </FormItem>
                    )}
                />

                <FormField
                    control={form.control}
                    name="profilePictureUrl"
                    render={({ field }) => (
                        <FormItem>
                            <FormLabel>Profile Picture URL</FormLabel>
                            <FormControl>
                                <Input
                                    placeholder="Enter URL of your profile picture"
                                    {...field}
                                    className={cn(
                                        "w-full",
                                        form.formState.errors.profilePictureUrl &&
                                            "border-destructive"
                                    )}
                                />
                            </FormControl>
                            <FormMessage />
                        </FormItem>
                    )}
                />

                {["contextualNameDetails", "identityNameHistory", "identityContacts", "onlinePresence", "additionalAttributes"].map(
                    (jsonField) => (
                        <FormField
                            key={jsonField}
                            control={form.control}
                            name={jsonField as keyof IdentityFormData}
                            render={({ field }) => (
                                <FormItem>
                                    <FormLabel>{jsonField}</FormLabel>
                                    <FormControl>
                                        <Textarea
                                            rows={4}
                                            placeholder="Enter data in JSON format"
                                            value={JSON.stringify(field.value, null, 2)}
                                            onChange={(e) => {
                                                try {
                                                    field.onChange(JSON.parse(e.target.value));
                                                } catch (err) {
                                                    // allow temporary invalid JSON
                                                    field.onChange(e.target.value);
                                                }
                                            }}
                                            className={cn(
                                                "w-full",
                                                form.formState.errors[
                                                    jsonField as keyof IdentityFormData
                                                ] && "border-destructive"
                                            )}
                                        />
                                    </FormControl>
                                    <FormMessage />
                                </FormItem>
                            )}
                        />
                    )
                )}

                <FormField
                    control={form.control}
                    name="websiteUrls"
                    render={({ field }) => (
                        <FormItem>
                            <FormLabel>Website URLs</FormLabel>
                            <FormControl>
                                <Input
                                    placeholder="Enter website URLs, separated by commas"
                                    value={field.value.join(", ")}
                                    onChange={(e) =>
                                        field.onChange(
                                            e.target.value
                                                .split(",")
                                                .map((v) => v.trim())
                                                .filter(Boolean)
                                        )
                                    }
                                    className="w-full"
                                />
                            </FormControl>
                            <FormMessage />
                        </FormItem>
                    )}
                />

                <FormField
                    control={form.control}
                    name="visibility"
                    render={({ field }) => (
                        <FormItem>
                            <FormLabel>Visibility</FormLabel>
                            <FormControl>
                                <RadioGroup
                                    className="flex space-x-4"
                                    onValueChange={field.onChange}
                                    value={field.value}
                                >
                                    {VISIBILITY_OPTIONS.map((option) => (
                                        <div
                                            key={option.value}
                                            className="flex items-center space-x-2"
                                        >
                                            <FormControl>
                                                <RadioGroupItem value={option.value} />
                                            </FormControl>
                                            <FormLabel className="font-normal">
                                                {option.label}
                                            </FormLabel>
                                        </div>
                                    ))}
                                </RadioGroup>
                            </FormControl>
                            <FormMessage />
                        </FormItem>
                    )}
                />

                {/* Hidden input for user ID */}
                <FormField
                    control={form.control}
                    name="user.id"
                    render={({ field }) => <input type="hidden" {...field} />}
                />

                <Button type="submit" className="w-full" disabled={loading}>
                    {loading ? "Saving..." : identityId ? "Save Changes" : "Create Identity"}
                </Button>
            </form>
        </Form>
    );
}
