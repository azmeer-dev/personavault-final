generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String           @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  accounts        Account[]
  apps            App[]
  consents        Consent[]
  consentRequests ConsentRequest[]
  identities      Identity[]
  sessions        Session[]
}

model Account {
  id                String     @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  email             String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  identities        Identity[] @relation("AccountToIdentity")

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Identity {
  id           String     @id @default(cuid())
  userId       String
  category         String
  name         String
  description  String?
  customValue  String?
  customFields Json?
  visibility   Visibility @default(PRIVATE)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  accounts     Account[]  @relation("AccountToIdentity")

  @@index([userId])
}

model App {
  id             String           @id @default(cuid())
  userId         String
  name           String
  apiKey         String
  scopes         String[]
  approved       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  Consent        Consent[]
  ConsentRequest ConsentRequest[]
}

model ConsentRequest {
  id            String   @id @default(cuid())
  userId        String
  appId         String
  context       String
  requestedKeys String[]
  approvedKeys  String[]
  status        String   @default("pending")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  app           App      @relation(fields: [appId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Consent {
  id            String   @id @default(cuid())
  userId        String
  appId         String
  grantedScopes String[]
  grantedAt     DateTime @default(now())
  app           App      @relation(fields: [appId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id          String   @id @default(cuid())
  actorId     String
  targetId    String
  action      String
  beforeValue String?
  afterValue  String?
  timestamp   DateTime @default(now())
}

enum Visibility {
  PUBLIC
  PRIVATE
}
